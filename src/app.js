const logger = require("./utils/logger");
const GryagBot = require("./bot");

// Initialize and start the bot
const bot = new GryagBot();
bot.start();

// Graceful shutdown –¥–ª—è Docker
let isShuttingDown = false;

const gracefulShutdown = async (signal) => {
  if (isShuttingDown) {
    logger.debug("Shutdown already in progress...");
    return;
  }

  isShuttingDown = true;
  logger.info(`\nüîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}. –ü–æ—á–∞—Ç–æ–∫ graceful shutdown...`);

  try {
    // –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
    if (bot && typeof bot.stop === "function") {
      logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ Telegram Bot...");
      await bot.stop();
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    logger.debug("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É...");

    // –î–∞—Ç–∏ —á–∞—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    await new Promise((resolve) => setTimeout(resolve, 2000));

    logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    process.exit(0);
  } catch (error) {
    logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å shutdown:", error);
    process.exit(1);
  }
};

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// Global error handling
process.on("unhandledRejection", (reason, promise) => {
  logger.error("Unhandled Rejection at:", promise, "reason:", reason);
});

process.on("uncaughtException", (error) => {
  logger.error("Uncaught Exception:", error);

  // –°–ø—Ä–æ–±–∞ graceful shutdown –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ
  if (!isShuttingDown) {
    gracefulShutdown("UNCAUGHT_EXCEPTION");
  } else {
    process.exit(1);
  }
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è PID –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const fs = require("fs");
const path = require("path");

try {
  const pidFile = path.join(__dirname, "..", "bot.pid");
  fs.writeFileSync(pidFile, process.pid.toString());
  logger.debug(`üìù PID –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${process.pid}`);
} catch (error) {
  logger.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ PID —Ñ–∞–π–ª:", error.message);
}
