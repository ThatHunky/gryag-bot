const { GoogleGenerativeAI } = require("@google/generative-ai");
const databaseService = require("./database");

class EmbeddingService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –¥–ª—è embeddings
    this.embeddingModel = this.genAI.getGenerativeModel({
      model: "text-embedding-004",
    });

    // –ö–µ—à –¥–ª—è embeddings —â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–π–≤—ñ –∑–∞–ø–∏—Ç–∏
    this.embeddingCache = new Map();
    this.maxCacheSize = 1000;
  }

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ embedding –¥–ª—è —Ç–µ–∫—Å—Ç—É
  async createEmbedding(text) {
    if (!text || text.trim().length === 0) {
      return null;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    const cacheKey = this.hashText(text);
    if (this.embeddingCache.has(cacheKey)) {
      return this.embeddingCache.get(cacheKey);
    }

    try {
      const result = await this.embeddingModel.embedContent(text);
      const embedding = result.embedding.values;

      // –î–æ–¥–∞—î–º–æ –¥–æ –∫–µ—à—É
      this.addToCache(cacheKey, embedding);

      return embedding;
    } catch (error) {
      console.error("‚ùå Error creating embedding:", error);
      return null;
    }
  }

  // –û–±—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —Å—Ç–≤–æ—Ä–∏—Ç–∏ embedding —ñ –∑–±–µ—Ä–µ–≥—Ç–∏
  async processMessage(messageData) {
    const { messageText, mediaCaption } = messageData;

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è embedding (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –æ–ø–∏—Å –º–µ–¥—ñ–∞ —è–∫—â–æ —î)
    let textForEmbedding = messageText || "";
    if (mediaCaption) {
      textForEmbedding += ` ${mediaCaption}`;
    }

    if (textForEmbedding.trim().length === 0) {
      return null;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ embedding
    const embedding = await this.createEmbedding(textForEmbedding);

    if (embedding) {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ embedding –¥–æ –±–∞–∑–∏
      const messageId = await databaseService.saveMessage({
        ...messageData,
        embedding,
      });

      return messageId;
    } else {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–µ–∑ embedding
      return await databaseService.saveMessage(messageData);
    }
  }

  // –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  async searchSimilarMessages(
    chatId,
    queryText,
    limit = 5,
    similarityThreshold = 0.5
  ) {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ embedding –¥–ª—è –∑–∞–ø–∏—Ç—É
      const queryEmbedding = await this.createEmbedding(queryText);
      if (!queryEmbedding) {
        return [];
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ embeddings –∑ —Ü—å–æ–≥–æ —á–∞—Ç—É
      const messages = await databaseService.getMessagesWithEmbeddings(chatId);

      if (messages.length === 0) {
        return [];
      }

      // –†–∞—Ö—É—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const similarities = messages.map((message) => {
        const similarity = this.cosineSimilarity(
          queryEmbedding,
          message.embedding
        );
        return {
          ...message,
          similarity,
        };
      });

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø–æ—Ä–æ–≥–æ–º —ñ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å—Ö–æ–∂—ñ—Å—Ç—é
      const relevantMessages = similarities
        .filter((msg) => msg.similarity >= similarityThreshold)
        .sort((a, b) => b.similarity - a.similarity)
        .slice(0, limit);

      return relevantMessages;
    } catch (error) {
      console.error("‚ùå Error in semantic search:", error);
      return [];
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  async findRelevantContext(chatId, currentMessage, limit = 3) {
    try {
      const relevantMessages = await this.searchSimilarMessages(
        chatId,
        currentMessage,
        limit,
        0.3 // –ù–∏–∂—á–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è –±—ñ–ª—å—à —à–∏—Ä–æ–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      );

      if (relevantMessages.length === 0) {
        return "";
      }

      // –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const contextParts = relevantMessages.map((msg) => {
        const author = msg.username ? `@${msg.username}` : msg.first_name;
        const timeAgo = this.formatTimeAgo(msg.timestamp);
        const similarity = (msg.similarity * 100).toFixed(1);

        return `${author} (${timeAgo}, —Å—Ö–æ–∂—ñ—Å—Ç—å: ${similarity}%): ${msg.message_text}`;
      });

      return `\nüìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó:\n${contextParts.join("\n")}\n`;
    } catch (error) {
      console.error("‚ùå Error finding relevant context:", error);
      return "";
    }
  }

  // –ö–æ—Å–∏–Ω—É—Å–Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ –≤–µ–∫—Ç–æ—Ä–∞–º–∏
  cosineSimilarity(vecA, vecB) {
    if (!vecA || !vecB || vecA.length !== vecB.length) {
      return 0;
    }

    let dotProduct = 0;
    let normA = 0;
    let normB = 0;

    for (let i = 0; i < vecA.length; i++) {
      dotProduct += vecA[i] * vecB[i];
      normA += vecA[i] * vecA[i];
      normB += vecB[i] * vecB[i];
    }

    if (normA === 0 || normB === 0) {
      return 0;
    }

    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
  }

  // –•–µ—à —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
  hashText(text) {
    let hash = 0;
    for (let i = 0; i < text.length; i++) {
      const char = text.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString();
  }

  // –î–æ–¥–∞—Ç–∏ –¥–æ –∫–µ—à—É –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—É
  addToCache(key, value) {
    if (this.embeddingCache.size >= this.maxCacheSize) {
      // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
      const firstKey = this.embeddingCache.keys().next().value;
      this.embeddingCache.delete(firstKey);
    }
    this.embeddingCache.set(key, value);
  }

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
  formatTimeAgo(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;

    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (days > 0) {
      return `${days} –¥–Ω. —Ç–æ–º—É`;
    } else if (hours > 0) {
      return `${hours} –≥–æ–¥. —Ç–æ–º—É`;
    } else if (minutes > 0) {
      return `${minutes} —Ö–≤. —Ç–æ–º—É`;
    } else {
      return "—â–æ–π–Ω–æ";
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à
  clearCache() {
    this.embeddingCache.clear();
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É
  getCacheStats() {
    return {
      size: this.embeddingCache.size,
      maxSize: this.maxCacheSize,
      usage:
        ((this.embeddingCache.size / this.maxCacheSize) * 100).toFixed(1) + "%",
    };
  }
}

module.exports = new EmbeddingService();
