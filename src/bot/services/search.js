const fetch = require("node-fetch");

class SearchService {
  constructor() {
    this.duckDuckGoUrl = "https://api.duckduckgo.com/";
    this.serpApiUrl = "https://serpapi.com/search.json";
    this.googleSearchUrl = "https://www.googleapis.com/customsearch/v1";
    this.cache = new Map();
    this.cacheTimeout = 300000; // 5 —Ö–≤–∏–ª–∏–Ω –∫–µ—à
  }

  async duckDuckGoInstant(query) {
    try {
      const cacheKey = `ddg_${query}`;
      const cached = this.cache.get(cacheKey);

      if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log("üéØ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ ddg");
        return cached.data;
      }

      console.log("üîç —à—É–∫–∞—é –≤ duckduckgo:", query);

      const params = new URLSearchParams({
        q: query,
        format: "json",
        no_html: "1",
        skip_disambig: "1",
        no_redirect: "1",
      });

      const response = await fetch(`${this.duckDuckGoUrl}?${params}`, {
        headers: {
          "User-Agent": "gryag-bot/1.0",
        },
      });

      if (!response.ok) {
        throw new Error(`ddg api error: ${response.status}`);
      }

      const data = await response.json();

      const result = {
        abstract: data.Abstract || null,
        abstractText: data.AbstractText || null,
        abstractSource: data.AbstractSource || null,
        abstractURL: data.AbstractURL || null,
        definition: data.Definition || null,
        definitionSource: data.DefinitionSource || null,
        definitionURL: data.DefinitionURL || null,
        answer: data.Answer || null,
        answerType: data.AnswerType || null,
        relatedTopics: (data.RelatedTopics || []).slice(0, 3).map((topic) => ({
          text: topic.Text,
          firstURL: topic.FirstURL,
        })),
        infobox: data.Infobox || null,
      };

      // –∫–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, {
        data: result,
        timestamp: Date.now(),
      });

      return result;
    } catch (error) {
      console.error("‚ùå ddg search error:", error);
      return null;
    }
  }

  async googleSearch(query, options = {}) {
    try {
      const apiKey = process.env.GOOGLE_SEARCH_API_KEY;
      const searchEngineId = process.env.GOOGLE_SEARCH_ENGINE_ID;

      if (!apiKey || !searchEngineId) {
        console.log("‚ö†Ô∏è Google Search API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ");
        return null;
      }

      const cacheKey = `google_${query}`;
      const cached = this.cache.get(cacheKey);

      if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
        console.log("üéØ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ google");
        return cached.data;
      }

      console.log("üîç —à—É–∫–∞—é –≤ google:", query);

      const params = new URLSearchParams({
        key: apiKey,
        cx: searchEngineId,
        q: query,
        num: options.limit || 5,
        lr: "lang_uk|lang_en", // —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
        safe: "active",
      });

      const response = await fetch(`${this.googleSearchUrl}?${params}`);

      if (!response.ok) {
        throw new Error(
          `Google API error: ${response.status} ${response.statusText}`
        );
      }

      const data = await response.json();

      if (!data.items || data.items.length === 0) {
        console.log("üì≠ google –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤");
        return [];
      }

      const results = data.items.map((item) => ({
        title: item.title,
        snippet: item.snippet,
        link: item.link,
        displayLink: item.displayLink,
        type: "google",
      }));

      // –∫–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.cache.set(cacheKey, {
        data: results,
        timestamp: Date.now(),
      });

      console.log(`‚úÖ google –∑–Ω–∞–π—à–æ–≤ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
      return results;
    } catch (error) {
      console.error("‚ùå google search error:", error);
      return null;
    }
  }

  async searchWeb(query, options = {}) {
    try {
      // 1. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ Google Search (–Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏)
      const googleResults = await this.googleSearch(query, options);
      if (googleResults && googleResults.length > 0) {
        return googleResults;
      }

      // 2. –Ø–∫—â–æ Google –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ–±—É—î–º–æ DuckDuckGo instant answer
      const instantResult = await this.duckDuckGoInstant(query);
      if (
        instantResult &&
        (instantResult.abstract ||
          instantResult.definition ||
          instantResult.answer)
      ) {
        return this.formatInstantResult(instantResult);
      }

      // 3. –ü—Ä–æ–±—É—î–º–æ Wikipedia
      const wikiResult = await this.searchWikipedia(query);
      if (wikiResult && wikiResult.length > 0) {
        return wikiResult;
      }

      // 4. –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - HTML search –∑ DuckDuckGo
      return await this.htmlSearch(query, options);
    } catch (error) {
      console.error("‚ùå web search error:", error);
      return null;
    }
  }

  async searchWikipedia(query) {
    try {
      console.log("üìö —à—É–∫–∞—é –≤ wikipedia:", query);

      // –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      const searchQuery =
        query.includes("ukraine") || query.includes("—É–∫—Ä–∞—ó–Ω")
          ? query
          : `${query} ukraine`; // –¥–æ–¥–∞—î–º–æ ukraine –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

      const searchUrl = `https://uk.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(searchQuery)}`;

      const response = await fetch(searchUrl, {
        headers: {
          "User-Agent": "gryag-bot/1.0 (https://github.com/user/gryag-bot)",
          Accept: "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();

        if (data.extract && data.extract.length > 20) {
          return [
            {
              title: `üìö ${data.title}`,
              snippet: data.extract,
              link:
                data.content_urls?.desktop?.page ||
                `https://uk.wikipedia.org/wiki/${encodeURIComponent(data.title)}`,
              displayLink: "uk.wikipedia.org",
              type: "wikipedia",
            },
          ];
        }
      }

      // —è–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π wiki –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –ø—Ä–æ–±—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π
      const enSearchUrl = `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;

      const enResponse = await fetch(enSearchUrl, {
        headers: {
          "User-Agent": "gryag-bot/1.0 (https://github.com/user/gryag-bot)",
          Accept: "application/json",
        },
      });

      if (enResponse.ok) {
        const enData = await enResponse.json();

        if (enData.extract && enData.extract.length > 20) {
          return [
            {
              title: `üìö ${enData.title}`,
              snippet: enData.extract,
              link:
                enData.content_urls?.desktop?.page ||
                `https://en.wikipedia.org/wiki/${encodeURIComponent(enData.title)}`,
              displayLink: "en.wikipedia.org",
              type: "wikipedia",
            },
          ];
        }
      }

      return null;
    } catch (error) {
      console.error("‚ùå wikipedia search error:", error);
      return null;
    }
  }

  async htmlSearch(query, options = {}) {
    try {
      console.log("üåê html search –¥–ª—è:", query);

      // —Å–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–∞–ø–∏—Ç—É –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      const searchVariants = [
        query,
        `${query} 2025`,
        `${query} —É–∫—Ä–∞—ó–Ω–∞`,
        `${query} –Ω–æ–≤–∏–Ω–∏ —Å—å–æ–≥–æ–¥–Ω—ñ`,
      ];

      for (const searchQuery of searchVariants) {
        const instantResult = await this.duckDuckGoInstant(searchQuery);

        if (
          instantResult &&
          (instantResult.abstract ||
            instantResult.definition ||
            instantResult.answer)
        ) {
          console.log("‚úÖ –∑–Ω–∞–π–¥–µ–Ω–æ instant —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è:", searchQuery);
          return this.formatInstantResult(instantResult);
        }
      }

      // —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log(
        "‚ö†Ô∏è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –ø–æ–≤–µ—Ä—Ç–∞—é –±–∞–∑–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
      );

      return [
        {
          title: `–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ: ${query}`,
          snippet: `–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ "${query}". –°–ø—Ä–æ–±—É–π—Ç–µ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /search –∑ —ñ–Ω—à–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.`,
          link: `https://duckduckgo.com/?q=${encodeURIComponent(query)}`,
          displayLink: "duckduckgo.com",
          type: "fallback",
        },
      ];
    } catch (error) {
      console.error("‚ùå html search error:", error);
      return null;
    }
  }

  formatInstantResult(result) {
    const formatted = [];

    if (result.answer) {
      formatted.push({
        title: "üí° –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
        snippet: result.answer,
        link: result.abstractURL || "#",
        displayLink: "duckduckgo.com",
        type: "answer",
      });
    }

    if (result.definition) {
      formatted.push({
        title: "üìñ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è",
        snippet: result.definition,
        link: result.definitionURL || "#",
        displayLink: result.definitionSource || "duckduckgo.com",
        type: "definition",
      });
    }

    if (result.abstract && result.abstract.length > 10) {
      formatted.push({
        title: `‚ÑπÔ∏è ${result.abstractSource || "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"}`,
        snippet: result.abstract,
        link: result.abstractURL || "#",
        displayLink: result.abstractSource || "duckduckgo.com",
        type: "abstract",
      });
    }

    // –¥–æ–¥–∞—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ç–µ–º–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ –º–∞—é—Ç—å —Å–µ–Ω—Å
    if (result.relatedTopics && result.relatedTopics.length > 0) {
      result.relatedTopics.forEach((topic, index) => {
        if (topic.text && topic.text.length > 20 && index < 2) {
          // —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 2 —ñ —è–∫—â–æ –¥–æ–≤—à—ñ –Ω—ñ–∂ 20 —Å–∏–º–≤–æ–ª—ñ–≤
          formatted.push({
            title: "üîó –ü–æ–≤'—è–∑–∞–Ω–∞ —Ç–µ–º–∞",
            snippet: topic.text,
            link: topic.firstURL || "#",
            displayLink: "duckduckgo.com",
            type: "related",
          });
        }
      });
    }

    // —è–∫—â–æ —î infobox, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ —Ç–µ–∂
    if (
      result.infobox &&
      result.infobox.content &&
      result.infobox.content.length > 0
    ) {
      const infoboxContent = result.infobox.content
        .slice(0, 3)
        .map((item) => `${item.label}: ${item.value}`)
        .join("; ");

      if (infoboxContent.length > 10) {
        formatted.push({
          title: "üìä –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
          snippet: infoboxContent,
          link: result.infobox.meta?.[0]?.value || "#",
          displayLink: "duckduckgo.com",
          type: "infobox",
        });
      }
    }

    return formatted.length > 0 ? formatted : null;
  }

  async factCheck(claim) {
    console.log("‚úÖ —Ñ–∞–∫—Ç—á–µ–∫ –¥–ª—è:", claim);

    // —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥—É
    const factCheckQueries = [
      `${claim} fact check`,
      `${claim} –ø—Ä–∞–≤–¥–∞ —á–∏ –±—Ä–µ—Ö–Ω—è`,
      `${claim} stopfake voxukraine`,
      `"${claim}" —Ñ–∞–∫—Ç—á–µ–∫`,
    ];

    const results = [];

    for (const query of factCheckQueries) {
      const result = await this.searchWeb(query, { limit: 2 });
      if (result && result.length > 0) {
        results.push(...result);
      }

      // –Ω–µ–≤–µ–ª–∏—á–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    // –≤–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    const uniqueResults = results.filter(
      (result, index, self) =>
        index === self.findIndex((r) => r.title === result.title)
    );

    return uniqueResults.slice(0, 5); // —Ç–æ–ø 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  }

  async getNewsUpdate(topic = "—É–∫—Ä–∞—ó–Ω–∞ –Ω–æ–≤–∏–Ω–∏") {
    console.log("üì∞ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è:", topic);

    const newsQuery = `${topic} —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏ 2025`;
    return await this.searchWeb(newsQuery, { limit: 5 });
  }

  shouldTriggerSearch(text) {
    const searchTriggers = [
      "—â–æ —Å—Ç–∞–ª–æ—Å—è",
      "–æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏",
      "–Ω–æ–≤–∏–Ω–∏",
      "—Ñ–∞–∫—Ç—á–µ–∫",
      "–ø–µ—Ä–µ–≤—ñ—Ä",
      "—Ü–µ –ø—Ä–∞–≤–¥–∞",
      "—á–∏ —Ü–µ —Ç–∞–∫",
      "–∞–∫—Ç—É–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
      "–ø–æ—à—É–∫–∞–π",
      "–∑–Ω–∞–π–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é",
      "—â–æ –ø—Ä–æ —Ü–µ –≤—ñ–¥–æ–º–æ",
      "—â–æ –≤—ñ–¥–æ–º–æ –ø—Ä–æ",
      "—â–æ –≤—ñ–¥–æ–º–æ",
      "—Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ",
      "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ",
      "–¥—ñ–∑–Ω–∞–π—Å—è –ø—Ä–æ",
      "fact check",
      "is it true",
      "latest news",
      "search for",
      "find information",
      "tell me about",
      "what about",
      // –Ω–æ–≤—ñ —Ç—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –Ω–æ–≤–∏–Ω –º—ñ—Å—Ç
      "–Ω–æ–≤–∏–Ω–∏ –∂–∏—Ç–æ–º–∏—Ä–∞",
      "–Ω–æ–≤–∏–Ω–∏ –∫–∏—î–≤–∞",
      "–Ω–æ–≤–∏–Ω–∏ –ª—å–≤–æ–≤–∞",
      "–Ω–æ–≤–∏–Ω–∏ –æ–¥–µ—Å–∏",
      "–Ω–æ–≤–∏–Ω–∏ —Ö–∞—Ä–∫–æ–≤–∞",
      "–Ω–æ–≤–∏–Ω–∏ –¥–Ω—ñ–ø—Ä–∞",
      "—â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤",
      "—Å–∏—Ç—É–∞—Ü—ñ—è –≤",
    ];

    const lowerText = text.toLowerCase();
    return searchTriggers.some((trigger) => lowerText.includes(trigger));
  }

  shouldTriggerFactCheck(text) {
    const factCheckTriggers = [
      "–ø—Ä–∞–≤–¥–∞ —á–∏ –±—Ä–µ—Ö–Ω—è",
      "—Ñ–∞–∫—Ç—á–µ–∫",
      "—Ü–µ –ø—Ä–∞–≤–¥–∞",
      "–ø–µ—Ä–µ–≤—ñ—Ä —Ñ–∞–∫—Ç",
      "fact check",
      "is it true",
      "verify",
      "check this",
    ];

    const lowerText = text.toLowerCase();
    return factCheckTriggers.some((trigger) => lowerText.includes(trigger));
  }

  // –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  extractSearchQuery(text) {
    // –≤–∏–¥–∞–ª—è—î–º–æ "–≥—Ä—è–≥" —Ç–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    let cleanText = text.replace(/^(–≥—Ä—è–≥|gryag)\s*,?\s*/i, "").trim();

    // —à–∞–±–ª–æ–Ω–∏ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø—ñ—Å–ª—è —Ç—Ä–∏–≥–µ—Ä—ñ–≤
    const patterns = [
      // —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø–∞—Ç–µ—Ä–Ω–∏
      /(?:–ø–æ—à—É–∫–∞–π|–∑–Ω–∞–π–¥–∏)(?:\s+(?:—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é|—ñ–Ω—Ñ—É|–¥–∞–Ω—ñ))?(?:\s+–ø—Ä–æ)?\s+(.+)/i,
      /(?:—â–æ(?:\s+–ø—Ä–æ)?\s*(?:—Ü–µ\s+)?–≤—ñ–¥–æ–º–æ(?:\s+–ø—Ä–æ)?)\s+(.+)/i,
      /(?:—Ä–æ–∑–∫–∞–∂–∏(?:\s+(?:–º–µ–Ω—ñ|–Ω–∞–º))?(?:\s+–ø—Ä–æ)?)\s+(.+)/i,
      /(?:—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è(?:\s+–ø—Ä–æ)?)\s+(.+)/i,
      /(?:–¥—ñ–∑–Ω–∞–π—Å—è(?:\s+–ø—Ä–æ)?)\s+(.+)/i,
      /(?:–æ—Å—Ç–∞–Ω–Ω—ñ\s+)?–Ω–æ–≤–∏–Ω–∏(?:\s+–ø—Ä–æ)?\s+(.+)/i,
      /(?:—â–æ\s+—Å—Ç–∞–ª–æ—Å—è(?:\s+(?:–∑|–≤|—É))?)\s+(.+)/i,
      /(?:—Å–∏—Ç—É–∞—Ü—ñ—è(?:\s+(?:–≤|—É|–∑))?)\s+(.+)/i,
      /(?:—â–æ\s+–≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è(?:\s+(?:–≤|—É|–∑))?)\s+(.+)/i,
      /(?:—â–æ\s+—Ç–∞–º(?:\s+–∑)?)\s+(.+)/i,
      /(?:–ø–µ—Ä–µ–≤—ñ—Ä|—Ñ–∞–∫—Ç—á–µ–∫)(?:\s+(?:—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\s+)?–ø—Ä–æ)?\s+(.+)/i,
      /–º–æ–∂–µ—à\s+(?:–∑–Ω–∞–π—Ç–∏|–ø–æ—à—É–∫–∞—Ç–∏)(?:\s+(?:–æ—Å—Ç–∞–Ω–Ω—ñ\s+)?(?:–Ω–æ–≤–∏–Ω–∏|—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é))?(?:\s+–ø—Ä–æ)?\s+(.+)/i,
      /—à—É–∫–∞–π(?:\s+(?:—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é|–¥–∞–Ω—ñ))?(?:\s+–ø—Ä–æ)?\s+(.+)/i,

      // –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ø–∞—Ç–µ—Ä–Ω–∏
      /(?:search(?:\s+for)?|find(?:\s+(?:info|information))?(?:\s+about)?)\s+(.+)/i,
      /(?:tell\s+me\s+about|what\s+about)\s+(.+)/i,
      /(?:latest\s+)?news(?:\s+about)?\s+(.+)/i,
      /(?:fact\s+check|is\s+it\s+true)(?:\s+about)?\s+(.+)/i,
      /(?:verify|check)(?:\s+about)?\s+(.+)/i,
    ];

    // –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–±—ñ–≥ –∑ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏
    for (const pattern of patterns) {
      const match = cleanText.match(pattern);
      if (match && match[1]) {
        // –æ—á–∏—â—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        return match[1].trim().replace(/[?!.]*$/, "");
      }
    }

    // –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    // –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    const wordsToRemove = [
      "–º–æ–∂–µ—à",
      "–º–æ–∂–µ—à—å",
      "–º–æ–∂–µ—Ç–µ",
      "–±—É–¥—å –ª–∞—Å–∫–∞",
      "please",
      "—Å–∫–∞–∂–∏",
      "–ø–æ–∫–∞–∂–∏",
      "—Ä–∞—Å—Å–∫–∞–∂–∏",
      "tell",
      "show",
    ];

    for (const word of wordsToRemove) {
      const regex = new RegExp(`^${word}\\s+`, "i");
      cleanText = cleanText.replace(regex, "");
    }

    // —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
    return cleanText || text;
  }

  // –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
  clearCache() {
    this.cache.clear();
    console.log("üóëÔ∏è –∫–µ—à search service –æ—á–∏—â–µ–Ω–æ");
  }

  // –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à—É
  cleanOldCache() {
    const now = Date.now();
    for (const [key, value] of this.cache.entries()) {
      if (now - value.timestamp > this.cacheTimeout) {
        this.cache.delete(key);
      }
    }
  }
}

module.exports = new SearchService();
