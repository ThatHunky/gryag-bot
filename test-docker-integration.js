#!/usr/bin/env node

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Docker —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node test-docker-integration.js

const fs = require("fs");
const path = require("path");
const { spawn } = require("child_process");

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  reset: "\x1b[0m",
};

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É
const log = (message, color = "reset") => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const success = (message) => log(`‚úÖ ${message}`, "green");
const error = (message) => log(`‚ùå ${message}`, "red");
const warning = (message) => log(`‚ö†Ô∏è ${message}`, "yellow");
const info = (message) => log(`‚ÑπÔ∏è ${message}`, "blue");

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ Docker
function checkDockerFiles() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker —Ñ–∞–π–ª—ñ–≤...");

  const requiredFiles = [
    "Dockerfile",
    "docker-compose.yml",
    "docker-compose.dev.yml",
    ".dockerignore",
    ".env.docker.example",
    "deploy.sh",
    "deploy.ps1",
    "scripts/auto-update.sh",
    "scripts/healthcheck.js",
  ];

  let allFilesExist = true;

  requiredFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      success(`${file} –∑–Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      error(`${file} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
      allFilesExist = false;
    }
  });

  return allFilesExist;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
function checkDirectoryStructure() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...");

  const requiredDirs = ["data", "logs", "scripts", ".github/workflows"];

  let allDirsExist = true;

  requiredDirs.forEach((dir) => {
    if (fs.existsSync(dir)) {
      success(`–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ${dir}/ —ñ—Å–Ω—É—î`);
    } else {
      error(`–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ${dir}/ –≤—ñ–¥—Å—É—Ç–Ω—è`);
      allDirsExist = false;
    }
  });

  return allDirsExist;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
function checkExecutableFiles() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...");

  const executableFiles = ["scripts/auto-update.sh", "deploy.sh"];

  let allExecutable = true;

  executableFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      const stats = fs.statSync(file);
      if (stats.mode & parseInt("111", 8)) {
        success(`${file} –º–∞—î –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è`);
      } else {
        warning(`${file} –Ω–µ –º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è`);
        // –î–ª—è Unix —Å–∏—Å—Ç–µ–º
        if (process.platform !== "win32") {
          allExecutable = false;
        }
      }
    }
  });

  return allExecutable;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É docker-compose
function checkDockerComposeSyntax() {
  return new Promise((resolve) => {
    info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É docker-compose.yml...");

    const proc = spawn("docker-compose", ["config"], {
      stdio: ["pipe", "pipe", "pipe"],
    });

    let output = "";
    let errorOutput = "";

    proc.stdout.on("data", (data) => {
      output += data.toString();
    });

    proc.stderr.on("data", (data) => {
      errorOutput += data.toString();
    });

    proc.on("close", (code) => {
      if (code === 0) {
        success("docker-compose.yml —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π");
        resolve(true);
      } else {
        error("–ü–æ–º–∏–ª–∫–∞ –≤ docker-compose.yml:");
        console.log(errorOutput);
        resolve(false);
      }
    });

    proc.on("error", (err) => {
      warning("Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
      warning("–ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É...");
      resolve(true); // –ù–µ —Ñ–µ–π–ª–∏–º–æ —Ç–µ—Å—Ç —è–∫—â–æ Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    });
  });
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env.example —Ñ–∞–π–ª—É
function checkEnvExample() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env.docker.example...");

  if (!fs.existsSync(".env.docker.example")) {
    error(".env.docker.example –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
    return false;
  }

  const envContent = fs.readFileSync(".env.docker.example", "utf8");
  const requiredVars = [
    "BOT_TOKEN",
    "GEMINI_API_KEY",
    "ADMIN_USER_IDS",
    "BOT_USERNAME",
    "GITHUB_REPO",
    "AUTO_UPDATE_ENABLED",
  ];

  let allVarsPresent = true;

  requiredVars.forEach((varName) => {
    if (envContent.includes(varName)) {
      success(`–ó–º—ñ–Ω–Ω–∞ ${varName} –ø—Ä–∏—Å—É—Ç–Ω—è`);
    } else {
      error(`–ó–º—ñ–Ω–Ω–∞ ${varName} –≤—ñ–¥—Å—É—Ç–Ω—è`);
      allVarsPresent = false;
    }
  });

  return allVarsPresent;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health check —Å–∫—Ä–∏–ø—Ç–∞
function checkHealthCheck() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health check —Å–∫—Ä–∏–ø—Ç–∞...");

  const healthCheckPath = "scripts/healthcheck.js";

  if (!fs.existsSync(healthCheckPath)) {
    error("Health check —Å–∫—Ä–∏–ø—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
    return false;
  }

  try {
    const healthCheckContent = fs.readFileSync(healthCheckPath, "utf8");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ health check
    const requiredElements = [
      "process.exit(0)",
      "process.exit(1)",
      "pgrep",
      "bot.db",
    ];

    let allElementsPresent = true;

    requiredElements.forEach((element) => {
      if (healthCheckContent.includes(element)) {
        success(`Health check –º—ñ—Å—Ç–∏—Ç—å ${element}`);
      } else {
        warning(`Health check –Ω–µ –º—ñ—Å—Ç–∏—Ç—å ${element}`);
        // –ù–µ —Ä–æ–±–∏–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é
      }
    });

    return true;
  } catch (error) {
    error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è health check: ${error.message}`);
    return false;
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GitHub Actions
function checkGitHubActions() {
  info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GitHub Actions workflows...");

  const workflowFiles = [
    ".github/workflows/docker.yml",
    ".github/workflows/semantic-tests.yml",
  ];

  let allWorkflowsExist = true;

  workflowFiles.forEach((workflow) => {
    if (fs.existsSync(workflow)) {
      success(`Workflow ${workflow} –∑–Ω–∞–π–¥–µ–Ω–æ`);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
      const content = fs.readFileSync(workflow, "utf8");
      if (content.includes("docker") || content.includes("build")) {
        success(`Workflow ${workflow} –º—ñ—Å—Ç–∏—Ç—å Docker —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó`);
      }
    } else {
      error(`Workflow ${workflow} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
      allWorkflowsExist = false;
    }
  });

  return allWorkflowsExist;
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
function testAutoUpdateScript() {
  info("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞...");

  const scriptPath = "scripts/auto-update.sh";

  if (!fs.existsSync(scriptPath)) {
    error("–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
    return false;
  }

  const scriptContent = fs.readFileSync(scriptPath, "utf8");

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
  const requiredFunctions = [
    "backup_database",
    "check_for_updates",
    "update_code",
    "restart_bot",
    "graceful shutdown",
  ];

  let allFunctionsPresent = true;

  requiredFunctions.forEach((func) => {
    if (
      scriptContent.includes(func) ||
      scriptContent.includes(func.replace("_", "-")) ||
      scriptContent.includes(func.replace(" ", "_"))
    ) {
      success(`–§—É–Ω–∫—Ü—ñ—è "${func}" –∑–Ω–∞–π–¥–µ–Ω–∞`);
    } else {
      warning(`–§—É–Ω–∫—Ü—ñ—è "${func}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
      // –ù–µ —Ä–æ–±–∏–º–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é
    }
  });

  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function runTests() {
  log("\nüê≥ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Docker —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Gryag Bot\n", "blue");

  const tests = [
    { name: "–§–∞–π–ª–∏ Docker", test: checkDockerFiles },
    { name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π", test: checkDirectoryStructure },
    { name: "–í–∏–∫–æ–Ω—É–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏", test: checkExecutableFiles },
    { name: "–°–∏–Ω—Ç–∞–∫—Å–∏—Å Docker Compose", test: checkDockerComposeSyntax },
    { name: ".env.example —Ñ–∞–π–ª", test: checkEnvExample },
    { name: "Health Check —Å–∫—Ä–∏–ø—Ç", test: checkHealthCheck },
    { name: "GitHub Actions", test: checkGitHubActions },
    { name: "–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è", test: testAutoUpdateScript },
  ];

  let passedTests = 0;
  let totalTests = tests.length;

  for (const { name, test } of tests) {
    log(`\n--- –¢–µ—Å—Ç: ${name} ---`, "yellow");

    try {
      const result = await test();
      if (result) {
        passedTests++;
        success(`–¢–µ—Å—Ç "${name}" –ø—Ä–æ–π–¥–µ–Ω–æ\n`);
      } else {
        error(`–¢–µ—Å—Ç "${name}" –ø—Ä–æ–≤–∞–ª–µ–Ω–æ\n`);
      }
    } catch (err) {
      error(`–ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ "${name}": ${err.message}\n`);
    }
  }

  // –ü—ñ–¥—Å—É–º–æ–∫
  log("\n" + "=".repeat(50), "blue");
  log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø", "blue");
  log("=".repeat(50), "blue");

  if (passedTests === totalTests) {
    success(`‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! (${passedTests}/${totalTests})`);
    success("üöÄ Docker —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!");
  } else if (passedTests >= totalTests * 0.8) {
    warning(`‚ö†Ô∏è –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${passedTests}/${totalTests})`);
    warning("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö");
  } else {
    error(`‚ùå –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ (${passedTests}/${totalTests})`);
    error("üõ†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Docker");
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Ä–∞–¥–∏
  log("\nüí° –ü–û–†–ê–î–ò –î–õ–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:", "blue");
  info("1. –°–∫–æ–ø—ñ—é–π—Ç–µ .env.docker.example —É .env —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ");
  info("2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —Ç–∞ Docker Compose");
  info("3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ./deploy.sh start –¥–ª—è –∑–∞–ø—É—Å–∫—É (Linux/macOS)");
  info("4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ .\\deploy.ps1 start –¥–ª—è –∑–∞–ø—É—Å–∫—É (Windows)");
  info("5. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ ./deploy.sh logs");

  return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
  runTests()
    .then((success) => {
      process.exit(success ? 0 : 1);
    })
    .catch((err) => {
      error(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err.message}`);
      process.exit(1);
    });
}

module.exports = { runTests, checkDockerFiles, checkDirectoryStructure };
