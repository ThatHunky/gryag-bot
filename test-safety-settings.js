// –¢–µ—Å—Ç –Ω–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏ Gemini
const geminiService = require("./src/bot/services/gemini");

async function testSafetySettings() {
  console.log("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏ Gemini...\n");

  // –¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
  console.log("1Ô∏è‚É£ –¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É:");
  try {
    const context = {
      userId: 123,
      userName: "TestUser",
      chatId: 456,
    };

    const response = await geminiService.generateResponse(
      "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
      context
    );
    console.log("‚úÖ –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç:", response.substring(0, 100) + "...");
  } catch (error) {
    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
  }

  // –¢–µ—Å—Ç –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:");
  try {
    const context = {
      userId: 123,
      userName: "TestUser",
      chatId: 456,
    };

    const response = await geminiService.generateResponse(
      "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ —Ç–∞ –≤—ñ–π–Ω–∏",
      context
    );
    console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:", response.substring(0, 100) + "...");
  } catch (error) {
    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
  }

  // –¢–µ—Å—Ç –∑ –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∑ –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:");
  try {
    const context = {
      userId: 123,
      userName: "TestUser",
      chatId: 456,
    };

    const response = await geminiService.generateResponse(
      "–©–æ –¥—É–º–∞—î—à –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É?",
      context
    );
    console.log("‚úÖ –ü–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:", response.substring(0, 100) + "...");
  } catch (error) {
    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
  }

  console.log("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

testSafetySettings();
