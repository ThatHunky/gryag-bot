#!/bin/sh

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è Gryag Bot –∑ GitHub
# –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ–¥–Ω—è –≤–Ω–æ—á—ñ —á–µ—Ä–µ–∑ cron

LOG_FILE="/var/log/auto-update.log"
BACKUP_DIR="/app/data/backups"
APP_DIR="/app"

echo "$(date): –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è..." >> $LOG_FILE

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if [ "$AUTO_UPDATE_ENABLED" != "true" ]; then
    echo "$(date): –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É AUTO_UPDATE_ENABLED" >> $LOG_FILE
    exit 0
fi

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
backup_database() {
    if [ -f "/app/data/bot.db" ]; then
        mkdir -p $BACKUP_DIR
        cp /app/data/bot.db $BACKUP_DIR/bot_backup_$(date +%Y%m%d_%H%M%S).db
        echo "$(date): –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö" >> $LOG_FILE

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 7)
        find $BACKUP_DIR -name "bot_backup_*.db" -type f -mtime +7 -delete
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó (git hash)
get_current_version() {
    cd $APP_DIR
    git rev-parse HEAD 2>/dev/null || echo "unknown"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –Ω–∞ GitHub
check_for_updates() {
    cd $APP_DIR

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
    git fetch origin $GIT_BRANCH 2>>$LOG_FILE

    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –∑ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—é
    LOCAL_HASH=$(git rev-parse HEAD)
    REMOTE_HASH=$(git rev-parse origin/$GIT_BRANCH)

    if [ "$LOCAL_HASH" != "$REMOTE_HASH" ]; then
        echo "true"
    else
        echo "false"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É
update_code() {
    cd $APP_DIR

    echo "$(date): –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É..." >> $LOG_FILE

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω (—è–∫—â–æ —î)
    git stash 2>>$LOG_FILE

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É
    git pull origin $GIT_BRANCH 2>>$LOG_FILE

    if [ $? -eq 0 ]; then
        echo "$(date): –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" >> $LOG_FILE
        return 0
    else
        echo "$(date): –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–¥" >> $LOG_FILE
        return 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
update_dependencies() {
    cd $APP_DIR

    echo "$(date): –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..." >> $LOG_FILE

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è package.json
    if git diff --name-only HEAD~1 HEAD | grep -q "package.json"; then
        echo "$(date): –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ package.json, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..." >> $LOG_FILE
        npm ci --only=production 2>>$LOG_FILE

        if [ $? -eq 0 ]; then
            echo "$(date): –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" >> $LOG_FILE
        else
            echo "$(date): –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ" >> $LOG_FILE
            return 1
        fi
    else
        echo "$(date): –ó–º—ñ–Ω–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è—Ö –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" >> $LOG_FILE
    fi

    return 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
restart_bot() {
    echo "$(date): –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..." >> $LOG_FILE

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ PID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É node
    BOT_PID=$(pgrep -f "node.*app.js" | head -1)

    if [ -n "$BOT_PID" ]; then
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ SIGTERM –¥–ª—è graceful shutdown
        kill -TERM $BOT_PID

        # –ß–µ–∫–∞—î–º–æ –¥–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        for i in $(seq 1 30); do
            if ! kill -0 $BOT_PID 2>/dev/null; then
                break
            fi
            sleep 1
        done

        # –Ø–∫—â–æ –ø—Ä–æ—Ü–µ—Å —â–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        if kill -0 $BOT_PID 2>/dev/null; then
            kill -KILL $BOT_PID
            echo "$(date): –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–∏–º—É—Å–æ–≤–æ" >> $LOG_FILE
        else
            echo "$(date): –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ" >> $LOG_FILE
        fi
    fi

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç –∑–Ω–æ–≤—É
    cd $APP_DIR
    nohup npm start >> $LOG_FILE 2>&1 &

    echo "$(date): –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ" >> $LOG_FILE
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
send_update_notification() {
    if [ -n "$UPDATE_NOTIFICATION_CHAT_ID" ] && [ -n "$BOT_TOKEN" ]; then
        MESSAGE="üîÑ Gryag Bot –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n–ß–∞—Å: $(date)\n–í–µ—Ä—Å—ñ—è: $(get_current_version | cut -c1-8)"

        curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$UPDATE_NOTIFICATION_CHAT_ID\",\"text\":\"$MESSAGE\",\"parse_mode\":\"HTML\"}" \
            >> $LOG_FILE 2>&1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
main() {
    echo "$(date): =================================" >> $LOG_FILE
    echo "$(date): –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è" >> $LOG_FILE

    CURRENT_VERSION=$(get_current_version)
    echo "$(date): –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $CURRENT_VERSION" >> $LOG_FILE

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω—å
    UPDATES_AVAILABLE=$(check_for_updates)

    if [ "$UPDATES_AVAILABLE" = "true" ]; then
        echo "$(date): –í–∏—è–≤–ª–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å..." >> $LOG_FILE

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
        backup_database

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É
        if update_code; then
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
            if update_dependencies; then
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
                restart_bot

                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                send_update_notification

                NEW_VERSION=$(get_current_version)
                echo "$(date): –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ù–æ–≤–∞ –≤–µ—Ä—Å—ñ—è: $NEW_VERSION" >> $LOG_FILE
            else
                echo "$(date): –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π" >> $LOG_FILE
                exit 1
            fi
        else
            echo "$(date): –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –∫–æ–¥—É" >> $LOG_FILE
            exit 1
        fi
    else
        echo "$(date): –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ" >> $LOG_FILE
    fi

    echo "$(date): –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ" >> $LOG_FILE
    echo "$(date): =================================" >> $LOG_FILE
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
main
