#!/usr/bin/env node

// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
require('dotenv').config();

const databaseService = require('./src/bot/services/database');
const embeddingService = require('./src/bot/services/embedding');
const languageService = require('./src/bot/services/language');

async function testSemanticSearch() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
    const stats = await databaseService.getChatStatistics(123456);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î');

    // –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ embedding service
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è embedding service...');
    const testText = '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?';
    const embedding = await embeddingService.createEmbedding(testText);
    
    if (embedding && embedding.length > 0) {
      console.log(`‚úÖ Embedding —Å—Ç–≤–æ—Ä–µ–Ω–æ (–¥–æ–≤–∂–∏–Ω–∞: ${embedding.length})`);
    } else {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embedding');
      return;
    }

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç —Å—Ö–æ–∂–æ—Å—Ç—ñ –º—ñ–∂ —Ç–µ–∫—Å—Ç–∞–º–∏
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ...');
    const text1 = '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?';
    const text2 = '–í—ñ—Ç–∞—é, —è–∫ —Ç–∏ –ø–æ–∂–∏–≤–∞—î—à?';
    const text3 = '–°—å–æ–≥–æ–¥–Ω—ñ –≥–∞—Ä–Ω–∞ –ø–æ–≥–æ–¥–∞';

    const emb1 = await embeddingService.createEmbedding(text1);
    const emb2 = await embeddingService.createEmbedding(text2);
    const emb3 = await embeddingService.createEmbedding(text3);

    if (emb1 && emb2 && emb3) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ cosineSimilarity –∑ embedding service
      const similarity12 = calculateCosineSimilarity(emb1, emb2);
      const similarity13 = calculateCosineSimilarity(emb1, emb3);

      console.log(`üìä –°—Ö–æ–∂—ñ—Å—Ç—å "${text1}" ‚Üî "${text2}": ${(similarity12 * 100).toFixed(1)}%`);
      console.log(`üìä –°—Ö–æ–∂—ñ—Å—Ç—å "${text1}" ‚Üî "${text3}": ${(similarity13 * 100).toFixed(1)}%`);
      
      if (similarity12 > similarity13) {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Å—Ö–æ–∂—ñ —Ç–µ–∫—Å—Ç–∏');
      } else {
        console.log('‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ö–æ–∂–æ—Å—Ç—ñ');
      }
    }

    // –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ language service
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è language service...');
    const ukText = languageService.getText(12345, 'welcome', '–¢–µ—Å—Ç', 'Gryag');
    const sysPrompt = languageService.getSystemPrompt(12345);
    console.log('‚úÖ Language service –ø—Ä–∞—Ü—é—î');
    console.log(`üìù –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç: ${sysPrompt.substring(0, 100)}...`);

    // –¢–µ—Å—Ç 5: –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É embeddings...');
    const cacheStats = embeddingService.getCacheStats();
    console.log(`üì¶ –ö–µ—à: ${cacheStats.size}/${cacheStats.maxSize} (${cacheStats.usage})`);

    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('\nüìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏:');
    console.log('  ‚Ä¢ ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    console.log('  ‚Ä¢ üîç –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω—ñ');
    console.log('  ‚Ä¢ üìä –ö–æ–º–∞–Ω–¥–∞ /stats –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('  ‚Ä¢ üß† –®–Ü –æ—Ç—Ä–∏–º—É—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
  } finally {
    process.exit(0);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Å–∏–Ω—É—Å–Ω–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ
function calculateCosineSimilarity(embedding1, embedding2) {
  if (!embedding1 || !embedding2 || embedding1.length !== embedding2.length) {
    return 0;
  }

  let dotProduct = 0;
  let norm1 = 0;
  let norm2 = 0;

  for (let i = 0; i < embedding1.length; i++) {
    dotProduct += embedding1[i] * embedding2[i];
    norm1 += embedding1[i] * embedding1[i];
    norm2 += embedding2[i] * embedding2[i];
  }

  const denominator = Math.sqrt(norm1) * Math.sqrt(norm2);
  return denominator === 0 ? 0 : dotProduct / denominator;
}

if (require.main === module) {
  testSemanticSearch();
}
