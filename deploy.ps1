# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Gryag Bot Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: .\deploy.ps1 [start|stop|restart|update|logs|status]

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("start", "stop", "restart", "update", "logs", "status", "build", "cleanup", "backup")]
    [string]$Action
)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
$ComposeFile = "docker-compose.yml"
$EnvFile = ".env"
$ContainerName = "gryag-bot"

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–≤–æ–¥—É –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function Write-Success($Message) {
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor Green
}

function Write-Error($Message) {
    Write-Host "[–ü–û–ú–ò–õ–ö–ê] $Message" -ForegroundColor Red
}

function Write-Warning($Message) {
    Write-Host "[–£–í–ê–ì–ê] $Message" -ForegroundColor Yellow
}

function Write-Info($Message) {
    Write-Host "[–Ü–ù–§–û] $Message" -ForegroundColor Cyan
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker
function Test-Docker {
    try {
        $null = Get-Command docker -ErrorAction Stop
        $null = Get-Command docker-compose -ErrorAction Stop
    }
    catch {
        Write-Error "Docker –∞–±–æ Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º."
        exit 1
    }
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ .env —Ñ–∞–π–ª—É
function Test-EnvFile {
    if (-not (Test-Path $EnvFile)) {
        Write-Warning ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—é –∑ —à–∞–±–ª–æ–Ω—É..."

        if (Test-Path ".env.docker.example") {
            Copy-Item ".env.docker.example" $EnvFile
            Write-Warning "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ $EnvFile —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"
            Write-Error "–ó–∞–ø—É—Å–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É"
            exit 1
        }
        else {
            Write-Error "–®–∞–±–ª–æ–Ω .env.docker.example –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            exit 1
        }
    }
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
function Initialize-Directories {
    Write-Success "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."

    $null = New-Item -ItemType Directory -Force -Path "data\backups"
    $null = New-Item -ItemType Directory -Force -Path "logs"

    Write-Success "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—É
function Build-Image {
    Write-Success "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É..."
    & docker-compose -f $ComposeFile build --no-cache
    if ($LASTEXITCODE -eq 0) {
        Write-Success "–û–±—Ä–∞–∑ –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
    } else {
        Write-Error "–ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏ –æ–±—Ä–∞–∑—É"
        exit 1
    }
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function Start-Bot {
    Test-Docker
    Test-EnvFile
    Initialize-Directories

    Write-Success "–ó–∞–ø—É—Å–∫ Gryag Bot..."

    # –ó—É–ø–∏–Ω–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î
    $existingContainer = docker ps -q -f name=$ContainerName
    if ($existingContainer) {
        Write-Warning "–ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        & docker-compose -f $ComposeFile down
    }

    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    & docker-compose -f $ComposeFile up -d

    if ($LASTEXITCODE -eq 0) {
        Write-Success "Gryag Bot –∑–∞–ø—É—â–µ–Ω–æ!"
        Write-Info "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'docker-compose logs -f $ContainerName' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤"
    } else {
        Write-Error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        exit 1
    }
}

# –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function Stop-Bot {
    Write-Success "–ó—É–ø–∏–Ω–∫–∞ Gryag Bot..."
    & docker-compose -f $ComposeFile down

    if ($LASTEXITCODE -eq 0) {
        Write-Success "Gryag Bot –∑—É–ø–∏–Ω–µ–Ω–æ"
    } else {
        Write-Error "–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    }
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function Restart-Bot {
    Write-Success "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Gryag Bot..."
    Stop-Bot
    Start-Sleep -Seconds 3
    Start-Bot
}

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
function Update-Bot {
    Write-Success "–û–Ω–æ–≤–ª–µ–Ω–Ω—è Gryag Bot..."

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if (Test-Path "data\bot.db") {
        $backupName = "bot_manual_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').db"
        Copy-Item "data\bot.db" "data\backups\$backupName"
        Write-Success "–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
    }

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–¥—É
    & git pull origin main

    if ($LASTEXITCODE -eq 0) {
        # –ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        Build-Image
        Restart-Bot
        Write-Success "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    } else {
        Write-Error "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É –∑ Git"
        exit 1
    }
}

# –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤
function Show-Logs {
    & docker-compose -f $ComposeFile logs -f $ContainerName
}

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function Show-Status {
    Write-Info "=== –°—Ç–∞—Ç—É—Å Gryag Bot ==="

    $container = docker ps -q -f name=$ContainerName
    if ($container) {
        Write-Success "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∞—Ü—é—î"

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        Write-Info "`n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ ==="
        & docker stats $ContainerName --no-stream --format "table {{.Container}}`t{{.CPUPerc}}`t{{.MemUsage}}`t{{.NetIO}}`t{{.PIDs}}"

        # Health check —Å—Ç–∞—Ç—É—Å
        try {
            $healthStatus = docker inspect --format='{{.State.Health.Status}}' $ContainerName 2>$null
            Write-Info "`n=== Health Check ==="
            switch ($healthStatus) {
                "healthy" { Write-Success "üíö Health check: Healthy" }
                "unhealthy" { Write-Error "‚ù§Ô∏è Health check: Unhealthy" }
                "starting" { Write-Warning "üíõ Health check: Starting" }
                default { Write-Info "üíô Health check: Unknown" }
            }
        }
        catch {
            Write-Info "üíô Health check: Unknown"
        }
    }
    else {
        Write-Error "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î"
    }

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–∑–∏
    Write-Info "`n=== Docker –æ–±—Ä–∞–∑–∏ ==="
    $images = docker images | Select-String "gryag-bot"
    if ($images) {
        $images | ForEach-Object { Write-Host $_.Line }
    } else {
        Write-Host "–û–±—Ä–∞–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    }

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞
    Write-Info "`n=== –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞ ==="
    if (Test-Path "data") {
        $dataSize = (Get-ChildItem -Recurse "data" | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "data/: $([math]::Round($dataSize, 2)) MB"
    }
    if (Test-Path "logs") {
        $logsSize = (Get-ChildItem -Recurse "logs" | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "logs/: $([math]::Round($logsSize, 2)) MB"
    }
}

# –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
function Start-Cleanup {
    Write-Warning "–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö..."

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π (—Å—Ç–∞—Ä—ñ—à–µ 30 –¥–Ω—ñ–≤)
    $oldBackups = Get-ChildItem -Path "data\backups" -Filter "*.db" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) }
    if ($oldBackups) {
        $oldBackups | Remove-Item -Force
        Write-Success "–í–∏–¥–∞–ª–µ–Ω–æ $($oldBackups.Count) —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"
    }

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
    $oldLogs = Get-ChildItem -Path "logs" -Filter "*.log" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) }
    if ($oldLogs) {
        $oldLogs | Remove-Item -Force
        Write-Success "–í–∏–¥–∞–ª–µ–Ω–æ $($oldLogs.Count) —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤"
    }

    # –û—á–∏—â–µ–Ω–Ω—è Docker
    & docker system prune -f

    Write-Success "–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
function Start-Backup {
    Write-Success "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó..."

    $backupDate = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupDir = "backup_$backupDate"

    $null = New-Item -ItemType Directory -Force -Path $backupDir

    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if (Test-Path "data\bot.db") {
        Copy-Item "data\bot.db" "$backupDir\"
    }

    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    Copy-Item $EnvFile "$backupDir\"
    Copy-Item $ComposeFile "$backupDir\"

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
    Compress-Archive -Path $backupDir -DestinationPath "$backupDir.zip" -Force
    Remove-Item -Recurse -Force $backupDir

    Write-Success "–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: $backupDir.zip"
}

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
switch ($Action) {
    "start" { Start-Bot }
    "stop" { Stop-Bot }
    "restart" { Restart-Bot }
    "update" { Update-Bot }
    "build" { Build-Image }
    "logs" { Show-Logs }
    "status" { Show-Status }
    "cleanup" { Start-Cleanup }
    "backup" { Start-Backup }
    default {
        Write-Host "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: $Action" -ForegroundColor Red
        Write-Host "`n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: .\deploy.ps1 {start|stop|restart|update|build|logs|status|cleanup|backup}"
        exit 1
    }
}
