#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫—É Gryag Bot —É Docker
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./deploy.sh [start|stop|restart|update|logs|status]

set -e

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"
CONTAINER_NAME="gryag-bot"

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[–ü–û–ú–ò–õ–ö–ê] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[–£–í–ê–ì–ê] $1${NC}"
}

info() {
    echo -e "${BLUE}[–Ü–ù–§–û] $1${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose."
        exit 1
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ .env —Ñ–∞–π–ª—É
check_env() {
    if [ ! -f "$ENV_FILE" ]; then
        warning ".env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—é –∑ —à–∞–±–ª–æ–Ω—É..."

        if [ -f ".env.docker.example" ]; then
            cp .env.docker.example $ENV_FILE
            warning "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ $ENV_FILE —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"
            error "–ó–∞–ø—É—Å–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É"
            exit 1
        else
            error "–®–∞–±–ª–æ–Ω .env.docker.example –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            exit 1
        fi
    fi
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
setup_directories() {
    log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."

    mkdir -p data/backups
    mkdir -p logs

    # –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    chmod 755 data
    chmod 755 logs

    log "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—É
build() {
    log "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É..."
    docker-compose -f $COMPOSE_FILE build --no-cache
    log "–û–±—Ä–∞–∑ –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start() {
    check_docker
    check_env
    setup_directories

    log "–ó–∞–ø—É—Å–∫ Gryag Bot..."

    # –ó—É–ø–∏–Ω–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î
    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        warning "–ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker-compose -f $COMPOSE_FILE down
    fi

    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    docker-compose -f $COMPOSE_FILE up -d

    log "Gryag Bot –∑–∞–ø—É—â–µ–Ω–æ!"
    info "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'docker-compose logs -f $CONTAINER_NAME' –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤"
}

# –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop() {
    log "–ó—É–ø–∏–Ω–∫–∞ Gryag Bot..."
    docker-compose -f $COMPOSE_FILE down
    log "Gryag Bot –∑—É–ø–∏–Ω–µ–Ω–æ"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Gryag Bot..."
    stop
    sleep 3
    start
}

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
update() {
    log "–û–Ω–æ–≤–ª–µ–Ω–Ω—è Gryag Bot..."

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if [ -f "data/bot.db" ]; then
        cp data/bot.db "data/backups/bot_manual_backup_$(date +%Y%m%d_%H%M%S).db"
        log "–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
    fi

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–¥—É
    git pull origin main

    # –ü–µ—Ä–µ–∑–±—ñ—Ä–∫–∞ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    build
    restart

    log "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤
logs() {
    docker-compose -f $COMPOSE_FILE logs -f $CONTAINER_NAME
}

# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
status() {
    echo
    info "=== –°—Ç–∞—Ç—É—Å Gryag Bot ==="

    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∞—Ü—é—î${NC}"

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        docker stats $CONTAINER_NAME --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.PIDs}}"

        # Health check —Å—Ç–∞—Ç—É—Å
        echo
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "unknown")
        case $HEALTH_STATUS in
            "healthy")
                echo -e "${GREEN}üíö Health check: Healthy${NC}"
                ;;
            "unhealthy")
                echo -e "${RED}‚ù§Ô∏è Health check: Unhealthy${NC}"
                ;;
            "starting")
                echo -e "${YELLOW}üíõ Health check: Starting${NC}"
                ;;
            *)
                echo -e "${BLUE}üíô Health check: Unknown${NC}"
                ;;
        esac

    else
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î${NC}"
    fi

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä–∞–∑–∏
    echo
    info "=== Docker –æ–±—Ä–∞–∑–∏ ==="
    docker images | grep gryag-bot || echo "–û–±—Ä–∞–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞
    echo
    info "=== –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫–∞ ==="
    du -sh data/ logs/ 2>/dev/null || echo "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
}

# –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
cleanup() {
    warning "–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö..."

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π (—Å—Ç–∞—Ä—ñ—à–µ 30 –¥–Ω—ñ–≤)
    find data/backups -name "*.db" -type f -mtime +30 -delete 2>/dev/null || true

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤
    find logs -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true

    # –û—á–∏—â–µ–Ω–Ω—è Docker
    docker system prune -f

    log "–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
backup() {
    log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó..."

    BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
    BACKUP_DIR="backup_$BACKUP_DATE"

    mkdir -p $BACKUP_DIR

    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if [ -f "data/bot.db" ]; then
        cp data/bot.db "$BACKUP_DIR/"
    fi

    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    cp $ENV_FILE "$BACKUP_DIR/"
    cp $COMPOSE_FILE "$BACKUP_DIR/"

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
    tar -czf "$BACKUP_DIR.tar.gz" $BACKUP_DIR
    rm -rf $BACKUP_DIR

    log "–†–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ: $BACKUP_DIR.tar.gz"
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    update)
        update
        ;;
    build)
        build
        ;;
    logs)
        logs
        ;;
    status)
        status
        ;;
    cleanup)
        cleanup
        ;;
    backup)
        backup
        ;;
    *)
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 {start|stop|restart|update|build|logs|status|cleanup|backup}"
        echo
        echo "–ö–æ–º–∞–Ω–¥–∏:"
        echo "  start    - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç"
        echo "  stop     - –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç"
        echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç"
        echo "  update   - –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–¥ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏"
        echo "  build    - –ó—ñ–±—Ä–∞—Ç–∏ Docker –æ–±—Ä–∞–∑"
        echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏"
        echo "  status   - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"
        echo "  cleanup  - –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ"
        echo "  backup   - –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é"
        exit 1
        ;;
esac
